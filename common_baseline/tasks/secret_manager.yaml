- block:
    - name: Read the master secret passphrase
      shell: aws secretsmanager get-secret-value --secret-id master_key --region {{ aws_region }} | jq --raw-output '.SecretString' | jq -r '."master"'
      register: result

    - name: Create temp_secret directory
      file:
        path: '{{ remote_path }}'
        state: directory

    - name: copy secret-keys.yaml from local to target server
      copy:
        src: '{{ base_path }}/files/secret-keys.yaml'
        dest: '{{ remote_path }}/secret-keys.yaml'

    - name: Decrypt the secret file
      shell: openssl enc -aes-256-cbc -d -in {{ remote_path }}/secret-keys.yaml -out {{ remote_path }}/secret-plain.yaml -k {{result.stdout}}
      args:
        executable: /bin/bash

    - name: fetch file from remote server into local
      fetch:
        src: '{{ remote_path }}/secret-plain.yaml'
        dest: '{{ base_path }}/files/'
        flat: yes

    - name: Read secret-plain.yaml and save the yaml data
      set_fact:
        yamldata: "{{ lookup('file', '{{ base_path }}/files/secret-plain.yaml') | from_yaml }}"

    - name: convert yaml data into list
      set_fact:
        secretData: "{{ yamldata | dict2items }}"

    - name: copy secret_manager.py file from local to target server
      copy:
        src: '{{ base_path }}/files/secret_manager.py'
        dest: '{{ remote_path }}/secret_manager.py'

    - name: Install and upgrade pip
      pip:
        name: pip
        extra_args: --upgrade
        executable: pip3
      become: yes
      
    - name: Install boto3 using pip3
      pip:
        name: boto3
        executable: pip3

    - name: create secrets in secret manager
      shell: "python3 {{ remote_path }}/secret_manager.py {{ aws_region }} {{item.key}} {{item.value}}"
      args:
        executable: /bin/bash
      with_items: "{{secretData}}"

    - name: remove the temp_secret folder
      file:
        path: '{{ remote_path }}'
        state: absent
